{"version":3,"sources":["PokemonList.js","Pagination.js","App.js","index.js"],"names":["PokemonList","pokemon","className","map","p","key","Pagination","goToNextPage","goToPrevPage","onClick","App","useState","setPokemon","currentPageUrl","setCurrentPageUrl","nextPageUrl","setNextPageUrl","prevPageUrl","setPrevPageUrl","loading","setLoading","useEffect","cancel","axios","get","cancelToken","CancelToken","c","then","res","data","next","previous","results","name","ReactDOM","render","document","getElementById"],"mappings":"6MAIe,SAASA,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACnC,OACI,yBAAKC,UAAU,QACVD,EAAQE,KAAI,SAAAC,GAAC,OACV,yBAAKC,IAAKD,EAAGF,UAAU,eAAeE,OCJvC,SAASE,EAAT,GAAmD,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,aAC9C,OACI,yBAAKN,UAAU,cACVM,GAAgB,4BAAQC,QAASD,EAAaN,UAAU,UAAxC,YAChBK,GAAgB,4BAAQE,QAASF,EAAaL,UAAU,UAAxC,S,oBCyDdQ,MAzDf,WAAe,MAGiBC,mBAAS,IAH1B,mBAGNV,EAHM,KAGGW,EAHH,OAK+BD,mBAAS,qCALxC,mBAKNE,EALM,KAKUC,EALV,OAMyBH,qBANzB,mBAMNI,EANM,KAMOC,EANP,OAOyBL,qBAPzB,mBAONM,EAPM,KAOOC,EAPP,OASiBP,oBAAS,GAT1B,mBASNQ,EATM,KASGC,EATH,KA0Cb,OA3BAC,qBAAU,WAGR,IAAIC,EAaF,OAdFF,GAAW,GAEXG,IAAMC,IAAIX,EAAgB,CACxBY,YAAa,IAAIF,IAAMG,aAAY,SAAAC,GAAC,OAAIL,EAASK,OAChDC,MAAK,SAAAC,GAENT,GAAW,GACXJ,EAAea,EAAIC,KAAKC,MACxBb,EAAeW,EAAIC,KAAKE,UACxBpB,EAAWiB,EAAIC,KAAKG,QAAQ9B,KAAI,SAAAC,GAAC,OAAIA,EAAE8B,YAKhC,kBAAMZ,OACd,CAACT,IAUAM,EAAgB,aAIlB,oCACE,wBAAIjB,UAAU,aAAd,YACA,kBAACF,EAAD,CAAaC,QAASA,IACtB,kBAACK,EAAD,CACEC,aAAcQ,EAhBpB,WACED,EAAkBC,IAe6B,KAC3CP,aAAcS,EAbpB,WACEH,EAAkBG,IAY4B,SCtDlDkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.e76b948d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css'\r\n//when there is a loop, need key on top level element \r\n\r\nexport default function PokemonList( { pokemon }) {\r\n    return (\r\n        <div className=\"Page\">            \r\n            {pokemon.map(p => (\r\n                <div key={p} className=\"PokemonCard\">{p}</div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n//below we are using an if statement to check if we should render the prev and next buttons - if there is a page that we can actually navigate to\r\n\r\nexport default function Pagination({goToNextPage, goToPrevPage}) {\r\n    return (\r\n        <div className=\"Pagination\">\r\n            {goToPrevPage && <button onClick={goToPrevPage}className=\"Button\">Previous</button>}\r\n            {goToNextPage && <button onClick={goToNextPage}className=\"Button\">Next</button>}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport PokemonList from './PokemonList'\nimport Pagination from './Pagination'\nimport axios from 'axios'\nimport './App.css'\n\n//use axios to get data from pokemon api\n\nfunction App() {\n  //pass the default/initial state, first state we want is list of pokemon\n  //returns an array with two variables - current state and method we can use to update our state (destructured array)\n  const [pokemon, setPokemon] = useState([])\n  //now setting up state for the current page we are on\n  const [currentPageUrl, setCurrentPageUrl] = useState(\"https://pokeapi.co/api/v2/pokemon\")\n  const [nextPageUrl, setNextPageUrl] = useState()\n  const [prevPageUrl, setPrevPageUrl] = useState()\n  //loading will store as true or false, by default our application is loading\n  const [loading, setLoading] = useState(true)\n\n  //useEffect (which is a hook) takes a function, pass an array of arguments, and when an argument changes, it will rerun the effect\n  //when we leave the array empty - means that we will rerender only once, meaning we will only fetch the data one time \n  //when we put in currentPageUrl, the app will rerender when the page url changes\n  //an effect is something we want to happen and then rerender our app when it does happen\n  useEffect(() => {\n    //to make more user friendly, have loading message\n    setLoading(true)\n    let cancel\n    axios.get(currentPageUrl, {\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res =>{\n      //we have our data, so no longer loading\n      setLoading(false)\n      setNextPageUrl(res.data.next)\n      setPrevPageUrl(res.data.previous)\n      setPokemon(res.data.results.map(p => p.name))\n      })\n\n      //to cancel old request when we make a new request\n      //so app doesn't load old data if an old request finishes before a new request\n      return () => cancel()\n  }, [currentPageUrl])\n\n  function goToNextPage(){\n    setCurrentPageUrl(nextPageUrl)\n  }\n\n  function goToPrevPage(){\n    setCurrentPageUrl(prevPageUrl)\n  }\n\n  if (loading) return \"Loading...\"\n\n  //use empty html tags (fragment) b/c js can only return one thing\n  return (\n    <>\n      <h1 className=\"MainTitle\">Pokemon!</h1>\n      <PokemonList pokemon={pokemon} />\n      <Pagination \n        goToNextPage={nextPageUrl ? goToNextPage : null}\n        goToPrevPage={prevPageUrl ? goToPrevPage: null}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}